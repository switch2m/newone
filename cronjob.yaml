apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-mysql
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  schedule: "*/2 * * * *"
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - args:
            - /backup.sh
            command:
            - /bin/sh
            env:
            - name: BACKUP_SRC_HOST
              value: mysqldb
            - name: BACKUP_SRC_PORT
              value: "3306"
            - name: BACKUP_TYPE
              value: full
            - name: BACKUP_PATH
              value: /xtrabackup
            - name: BACKUP_USER
              value: root
            - name: BACKUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql-root-secret
            image: perconalab/percona-xtrabackup:8.0.32-26
            imagePullPolicy: IfNotPresent
            name: xtrabackup
            volumeMounts:
            - mountPath: /backup.sh
              name: scripts
              subPath: backup.sh
            - mountPath: /restore.sh
              name: scripts
              subPath: restore.sh
            - mountPath: /var/lib/mysql
              name: mysql
          restartPolicy: OnFailure
          volumes:
          - name: mysql
            persistentVolumeClaim:
              claimName: test-claim
          - configMap:
              defaultMode: 420
              items:
              - key: backup.sh
                path: backup.sh
              - key: restore.sh
                path: restore.sh
              name: backupscripts
            name: scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backupscripts
data:
  backup.sh: "#! /bin/bash\n# this program create full and incremental backup\necho
    \"the script is running now\"\n#env variables: \n  #BACKUP_SRC_HOST \n  #BACKUP_SRC_PORT\n
    \ #BACKUP_TYPE {full,inc}\n  #BACKUP_PATH\n  #BACKUP_USER\n  #BACKUP_PASSWORD\necho
    \"current available space is:\" \n\ndf -h | grep xtrabackup | awk '{print $4}'\n
    \ \n# set defaults\nMY_BACKUP_SRC_HOST=\"${BACKUP_SRC_HOST:-mysql-slave}\"\nMY_BACKUP_SRC_PORT=\"${BACKUP_SRC_PORT:-3306}\"\nMY_BACKUP_TYPE=\"${BACKUP_TYPE:-full}\"\nMY_BACKUP_PATH=\"${BACKUP_PATH:-/xtrabackup}\"\nMY_BACKUP_USER=\"${BACKUP_USER:-root}\"\nMY_BACKUP_PASSWORD=\"${BACKUP_PASSWORD:-password}\"\nMY_BACKUP_DAY_RETENTION=\"${BACKUP_DAY_RETENTION:-7}\"\n#MyVar=\"${DEPLOY_ENV:-default_value}\"\n\nDAY=`date
    '+%Y%m%d'`\nHOUR=`date '+%H'`\nSTART=`date +\"%Y-%m-%d_%H-%M-%S\"`\nLOGFILE=\"$MY_BACKUP_PATH/backup_log-$DAY.txt\"\n\nif
    [ \"$MY_BACKUP_TYPE\" = \"full\" ]; then\n  \n  FULL_PATH=$MY_BACKUP_PATH/$DAY/full/\n
    \ if [ ! -d \"$FULL_PATH\" ]; then\n    echo \"creating full backup FULL_PATH:$FULL_PATH\"
    | tee -a $LOGFILE\n   sleep 60s\n   echo \"sleeping for 600s zzzZZzzzZZ\"\n    mkdir
    -p $FULL_PATH\n    #echo \"xtrabackup --user=$MY_BACKUP_USER --password=$MY_BACKUP_PASSWORD
    --host=$MY_BACKUP_SRC_HOST --port=$MY_BACKUP_SRC_PORT --backup --target-dir=$FULL_PATH
    \"\n    xtrabackup --no-lock --user=$MY_BACKUP_USER --password=$MY_BACKUP_PASSWORD
    --host=$MY_BACKUP_SRC_HOST --port=$MY_BACKUP_SRC_PORT --backup --target-dir=$FULL_PATH
    >>$LOGFILE 2>&1\n    if [ $? -eq 0 ]\n     then\n\tENDSCRIPT=`date +\"%Y-%m-%d_%H-%M-%S\"`\n
    \      echo \"full backup Successfully terminated START:$START   END:$ENDSCRIPT\"
    | tee -a $LOGFILE\n     echo \"find $MY_BACKUP_PATH -maxdepth 1 -type d -ctime
    +$MY_BACKUP_DAY_RETENTION -exec rm -rf {} \\;\"\n       echo \"find $MY_BACKUP_PATH
    -maxdepth 1 -type d -ctime +$MY_BACKUP_DAY_RETENTION -exec rm -rf {} \\;\"| tee
    -a $LOGFILE\n       find $MY_BACKUP_PATH -maxdepth 1 -type d -ctime +7 -exec rm
    -vrf {} \\;\n       echo \"folders deleted successfully\"\n\n    else\n       echo
    \"failed\" | tee -a $LOGFILE\n       exit 1\n    fi\n   \n  else\n    echo \"Failed
    full backup - FULL_PATH:$FULL_PATH alredy exists\" | tee -a $LOGFILE\n  fi\nfi\n\nif
    [ \"$MY_BACKUP_TYPE\" = \"inc\" ]; then\n  NEWEST_DIR=`ls -t $MY_BACKUP_PATH/$DAY/|head
    -1`    \n  PREVIOUS_INC_PATH=$MY_BACKUP_PATH/$DAY/$NEWEST_DIR\n  NEW_INC_PATH=$MY_BACKUP_PATH/$DAY/$HOUR/\n
    \ if [ ! -d \"$NEW_INC_PATH\" ]; then\n    echo \"creating incremental backup
    PREVIOUS_INC_PATH:$PREVIOUS_INC_PATH  NEW_INC_PATH:$NEW_INC_PATH\" | tee -a $LOGFILE\n
    \   mkdir $NEW_INC_PATH\n    xtrabackup --no-lock --user=$MY_BACKUP_USER --password=$MY_BACKUP_PASSWORD
    --host=$MY_BACKUP_SRC_HOST --port=$MY_BACKUP_SRC_PORT --backup --target-dir=$NEW_INC_PATH
    --incremental-basedir=$PREVIOUS_INC_PATH >> $LOGFILE 2>&1\n    if [ $? -eq 0 ]\n
    \    then\n\tENDSCRIPT=`date +\"%Y-%m-%d_%H-%M-%S\"`\n       echo \"incremental
    backup Successfully terminated START:$START   END:$ENDSCRIPT\" | tee -a $LOGFILE\n
    \   else\n       echo \"failed incremental backup\" | tee -a $LOGFILE\n       exit\n
    \   fi\n  else\n    echo \"Failed incremental backup -  NEW_INC_PATH:$NEW_INC_PATH
    already exists\" | tee -a $LOGFILE\n  fi\nfi"
  restore.sh: "#! /bin/bash\n# this program restore backup\n\n#env variables: \n  #BACKUP_DAY\n
    \ #BACKUP_HOUR\n  #BACKUP_PATH\n\n#export BACKUP_DAY=20200618;export BACKUP_HOUR=15;sh
    /restore.sh\n#default values\nMY_BACKUP_PATH=\"${BACKUP_PATH:-/xtrabackup}\"\nMY_BACKUP_DAY=\"${BACKUP_DAY:-20200610}\"\nMY_BACKUP_HOUR=\"${BACKUP_HOUR:-06}\"\n\n\nTEMP_DIR=\"$MY_BACKUP_PATH/temp/$MY_BACKUP_DAY-$MY_BACKUP_HOUR\"\nRESTORE_LOG_FILE=\"$MY_BACKUP_PATH/temp/restore_log_$MY_BACKUP_DAY-$MY_BACKUP_HOUR\".txt\necho
    \"start preparing restore in Directory : $TEMP_DIR/$MY_BACKUP_DAY for details
    watch log file : $RESTORE_LOG_FILE\"\n\nSCRIPT_START=`date +\"%Y-%m-%d_%H-%M-%S\"`\n\n\nif
    [ -d \"$TEMP_DIR\" ]; then\n   echo \"temp directory $TEMP_DIR already exists\"\n
    \  exit 1\nfi\n\nmkdir -p \"$TEMP_DIR\"\n\ncp -R $MY_BACKUP_PATH/$MY_BACKUP_DAY
    $TEMP_DIR\nxtrabackup --prepare --apply-log-only --target-dir=\"$TEMP_DIR/$MY_BACKUP_DAY/full\"
    >>$RESTORE_LOG_FILE 2>&1\nif [ ! -d \"$TEMP_DIR/$MY_BACKUP_DAY/$MY_BACKUP_HOUR\"
    ]; then\n   #restore Full\n   echo \"No inc Backup for this Hour $MY_BACKUP_HOUR\"\nelse\n
    \ #restore incremental\n  INT_MY_BACKUP_HOUR=`expr $MY_BACKUP_HOUR + 0`\n  i=1\n
    \ while [ $i -le $INT_MY_BACKUP_HOUR ]\n  do\n    DIR=`printf \"%02d\\n\" $i `\n
    \   \n    if [ -d \"$TEMP_DIR/$MY_BACKUP_DAY/$DIR\" ]; then\n       echo \"preparing
    inc backup $DIR\"\n       echo \"preparing inc backup $DIR\" >>$RESTORE_LOG_FILE\n
    \      xtrabackup --prepare --apply-log-only --target-dir=\"$TEMP_DIR/$MY_BACKUP_DAY/full\"
    --incremental-dir=\"$TEMP_DIR/$MY_BACKUP_DAY/$DIR\" >> $RESTORE_LOG_FILE 2>&1\n
    \   fi\n    i=$[$i+1]\n done\n echo \"preparing full directory $TEMP_DIR/$MY_BACKUP_DAY/full\"\n
    echo \"preparing full directory $TEMP_DIR/$MY_BACKUP_DAY/full\" >> $RESTORE_LOG_FILE
    \n xtrabackup --prepare --target-dir=\"$TEMP_DIR/$MY_BACKUP_DAY/full\"  >>$RESTORE_LOG_FILE
    2>&1\n\n echo \"Directory to restore $TEMP_DIR/$MY_BACKUP_DAY/full\"\n echo \"Directory
    to restore $TEMP_DIR/$MY_BACKUP_DAY/full\" >> $RESTORE_LOG_FILE\n rsync -avrP
    $TEMP_DIR/$MY_BACKUP_DAY/full/ /var/lib/mysql/  >> $RESTORE_LOG_FILE 2>&1\n\nSCRIPT_END=`date
    +\"%Y-%m-%d_%H-%M-%S\"`\n echo \"start script : $SCRIPT_START end script : $SCRIPT_END
    \"\n echo \"start script : $SCRIPT_START end script : $SCRIPT_END \" >> $RESTORE_LOG_FILE\n
    \n #delete temp directory \nfi"
